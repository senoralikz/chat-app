{"version":3,"sources":["components/Login.js","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/OpenConversation.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/Dashboard.js","components/App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","event","preventDefault","current","value","Group","Label","Control","type","ref","required","Button","onClick","uuidV4","variant","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","InputGroup","as","onChange","target","resize","Append","Conversations","ListGroup","Item","action","active","r","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Body","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAKe,SAASA,EAAT,GAAgC,IAAfC,EAAc,EAAdA,WACxBC,EAAQC,mBAad,OACE,cAACC,EAAA,EAAD,CACEC,UAAU,4BACVC,MAAO,CAAEC,OAAQ,SAFnB,SAIE,eAACC,EAAA,EAAD,CAAMH,UAAU,QAAQI,SAhB5B,SAAsBC,GACpBA,EAAMC,iBAENV,EAAWC,EAAMU,QAAQC,QAavB,UACE,eAACL,EAAA,EAAKM,MAAN,WACE,cAACN,EAAA,EAAKO,MAAN,4BACA,cAACP,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OAAOC,IAAKhB,EAAOiB,UAAQ,OAEhD,cAACC,EAAA,EAAD,CAAQH,KAAK,SAASZ,UAAU,MAAhC,mBAGA,cAACe,EAAA,EAAD,CAAQC,QAjBd,WACEpB,EAAWqB,gBAgBuBC,QAAQ,YAAtC,kCC5BO,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,YAGgBF,EAC7B,EAA0BG,oBAAS,WACjC,IAAMC,EAAYC,aAAaC,QAAQJ,GACvC,OAAkB,OAAdE,EACKG,KAAKC,MAAMJ,GAEQ,oBAAjBH,EACFA,IAEAA,KARX,mBAAOb,EAAP,KAAcqB,EAAd,KAgBA,OAJAC,qBAAU,WACRL,aAAaM,QAAQT,EAAaK,KAAKK,UAAUxB,MAChD,CAACc,EAAad,IAEV,CAACA,EAAOqB,G,6BCnBXI,EAAkBC,IAAMC,gBAEvB,SAASC,IACd,OAAOC,qBAAWJ,GAGb,SAASK,EAAT,GAAyC,IAAbC,EAAY,EAAZA,SACjC,EAAgCpB,EAAgB,WAAY,IAA5D,mBAAOqB,EAAP,KAAiBC,EAAjB,KAQA,OACE,cAACR,EAAgBS,SAAjB,CAA0BlC,MAAO,CAAEgC,WAAUG,cAP/C,SAAuBC,EAAIC,GACzBJ,GAAY,SAACK,GACX,MAAM,GAAN,mBAAWA,GAAX,CAAyB,CAAEF,KAAIC,eAKjC,SACGN,I,qBCjBDQ,EAAgBb,IAAMC,gBAMrB,SAASa,EAAT,GAA2C,IAAjBT,EAAgB,EAAhBA,SAAUK,EAAM,EAANA,GACzC,EAA4BrB,qBAA5B,mBAAO0B,EAAP,KAAeC,EAAf,KASA,OAPApB,qBAAU,WACR,IAAMqB,EAAYC,IAAG,wBAAyB,CAAEC,MAAO,CAAET,QAGzD,OAFAM,EAAUC,GAEH,kBAAMA,EAAUG,WACtB,CAACV,IAGF,cAACG,EAAcL,SAAf,CAAwBlC,MAAOyC,EAA/B,SAAwCV,ICf5C,IAAMgB,EAAuBrB,IAAMC,gBAE5B,SAASqB,IACd,OAAOnB,qBAAWkB,GAGb,SAASE,EAAT,GAAkD,IAAjBb,EAAgB,EAAhBA,GAAIL,EAAY,EAAZA,SAC1C,EAA0CpB,EACxC,gBACA,IAFF,mBAAOuC,EAAP,KAAsBC,EAAtB,KAIA,EAAkEpC,mBAAS,GAA3E,mBAAOqC,EAAP,KAAkCC,EAAlC,KACQrB,EAAaJ,IAAbI,SACFS,EDZCZ,qBAAWU,GCoBlB,IAAMe,EAA2BC,uBAC/B,YAAmC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnBP,GAAiB,SAACQ,GAChB,IAAIC,GAAa,EACXC,EAAa,CAAEH,SAAQD,QACvBK,EAAmBH,EAAkBI,KAAI,SAACC,GAC9C,OAwEaC,EAxEKD,EAAaR,WAwEfU,EAxE2BV,EAyE/CS,EAAEE,SAAWD,EAAEC,SAEnBF,EAAEG,OACFF,EAAEE,OAEKH,EAAEI,OAAM,SAACC,EAASC,GACvB,OAAOD,IAAYJ,EAAEK,QA9EbX,GAAa,EACN,2BACFI,GADL,IAEEQ,SAAS,GAAD,mBAAMR,EAAaQ,UAAnB,CAA6BX,OAIlCG,EAgEjB,IAAuBC,EAAGC,KA7DlB,OAAIN,EACKE,EAED,GAAN,mBAAWH,GAAX,CAA8B,CAAEH,aAAYgB,SAAU,CAACX,WAI7D,CAACV,IAGH7B,qBAAU,WACR,GAAc,MAAVmB,EAIJ,OAFAA,EAAOgC,GAAG,kBAAmBnB,GAEtB,kBAAMb,EAAOiC,IAAI,sBACvB,CAACjC,EAAQa,IAQZ,IAAMqB,EAAyBzB,EAAca,KAAI,SAACC,EAAcO,GAC9D,IAAMf,EAAaQ,EAAaR,WAAWO,KAAI,SAACa,GAC9C,IAAMC,EAAU7C,EAAS8C,MAAK,SAACD,GAC7B,OAAOA,EAAQzC,KAAOwC,KAElBvC,EAAQwC,GAAWA,EAAQxC,MAASuC,EAC1C,MAAO,CAAExC,GAAIwC,EAAWvC,WAGpBmC,EAAWR,EAAaQ,SAAST,KAAI,SAACgB,GAC1C,IAAMF,EAAU7C,EAAS8C,MAAK,SAACD,GAC7B,OAAOA,EAAQzC,KAAO2C,EAAQrB,UAE1BrB,EAAQwC,GAAWA,EAAQxC,MAAS0C,EAAQrB,OAC5CsB,EAAS5C,IAAO2C,EAAQrB,OAC9B,OAAO,2BAAKqB,GAAZ,IAAqBE,WAAY5C,EAAM2C,cAGnCE,EAAWX,IAAUnB,EAC3B,OAAO,2BAAKY,GAAZ,IAA0BQ,WAAUhB,aAAY0B,gBAG5ClF,EAAQ,CACZkD,cAAeyB,EACfQ,qBAAsBR,EAAuBvB,GAC7CgC,YA/BF,SAAqB5B,EAAYC,GAC/BhB,EAAO4C,KAAK,eAAgB,CAAE7B,aAAYC,SAE1CH,EAAyB,CAAEE,aAAYC,OAAMC,OAAQtB,KA6BrDkD,wBAAyBjC,EACzBkC,mBA1EF,SAA4B/B,GAC1BL,GAAiB,SAACQ,GAChB,MAAM,GAAN,mBAAWA,GAAX,CAA8B,CAAEH,aAAYgB,SAAU,WA2E1D,OACE,cAACzB,EAAqBb,SAAtB,CAA+BlC,MAAOA,EAAtC,SACG+B,IC/FQ,SAASyD,IACtB,MAAwBzE,mBAAS,IAAjC,mBAAO0C,EAAP,KAAagC,EAAb,KAEMC,EAASnC,uBAAY,SAACoC,GACtBA,GACFA,EAAKC,eAAe,CAAEC,QAAQ,MAE/B,IACH,EAA8C7C,IAAtCoC,EAAR,EAAQA,YAAaD,EAArB,EAAqBA,qBAYrB,OACE,sBAAK3F,UAAU,iCAAf,UACE,qBAAKA,UAAU,8BACf,qBAAKA,UAAU,gEAAf,SACG2F,EAAqBX,SAAST,KAAI,SAACgB,EAASR,GAC3C,IAAMuB,EACJX,EAAqBX,SAASL,OAAS,IAAMI,EAC/C,OACE,sBACElE,IAAKyF,EAAcJ,EAAS,KAE5BlG,UAAS,kCACPuF,EAAQC,OACJ,iCACA,qBANR,UASE,qBACExF,UAAS,4BACPuF,EAAQC,OAAS,wBAA0B,UAF/C,SAKGD,EAAQtB,OAEX,qBACEjE,UAAS,2BACPuF,EAAQC,OAAS,aAAe,IAFpC,SAKGD,EAAQC,OAAS,MAAQD,EAAQE,eAnB/BV,QAyBb,cAAC5E,EAAA,EAAD,CAAMC,SA7CV,SAAsBC,GACpBA,EAAMC,iBAENsF,EACED,EAAqB3B,WAAWO,KAAI,SAACa,GAAD,OAAeA,EAAUxC,MAC7DqB,GAEFgC,EAAQ,KAsCN,SACE,cAAC9F,EAAA,EAAKM,MAAN,CAAYT,UAAU,MAAtB,SACE,eAACuG,EAAA,EAAD,WACE,cAACpG,EAAA,EAAKQ,QAAN,CACE6F,GAAG,WACH1F,UAAQ,EACRN,MAAOyD,EACPwC,SAAU,SAACpG,GAAD,OAAW4F,EAAQ5F,EAAMqG,OAAOlG,QAC1CP,MAAO,CAAEC,OAAQ,OAAQyG,OAAQ,UAEnC,cAACJ,EAAA,EAAWK,OAAZ,UACE,cAAC7F,EAAA,EAAD,CAAQH,KAAK,SAAb,8B,wCClEC,SAASiG,IACtB,MAAmDrD,IAA3CE,EAAR,EAAQA,cAAeoC,EAAvB,EAAuBA,wBAEvB,OACE,cAACgB,EAAA,EAAD,CAAW5F,QAAQ,QAAnB,SACGwC,EAAca,KAAI,SAACC,EAAcO,GAAf,OACjB,cAAC+B,EAAA,EAAUC,KAAX,CAEEC,QAAM,EACNhG,QAAS,kBAAM8E,EAAwBf,IACvCkC,OAAQzC,EAAakB,SAJvB,SAMGlB,EAAaR,WAAWO,KAAI,SAAC2C,GAAD,OAAOA,EAAErE,QAAMsE,KAAK,OAL5CpC,QCPA,SAASqC,IACtB,IAAQ5E,EAAaJ,IAAbI,SAER,OACE,cAACsE,EAAA,EAAD,CAAW5F,QAAQ,QAAnB,SACGsB,EAAS+B,KAAI,SAACc,GAAD,OACZ,cAACyB,EAAA,EAAUC,KAAX,UAAkC1B,EAAQxC,MAArBwC,EAAQzC,SCNtB,SAASyE,EAAT,GAA0C,IAAfC,EAAc,EAAdA,WAClCzH,EAAQC,mBACRyH,EAAUzH,mBACR6C,EAAkBP,IAAlBO,cASR,OACE,qCACE,cAAC6E,EAAA,EAAMC,OAAP,CAAcC,aAAW,EAAzB,4BACA,cAACF,EAAA,EAAMG,KAAP,UACE,eAACxH,EAAA,EAAD,CAAMC,SAXZ,SAAsBC,GACpBA,EAAMC,iBAENqC,EAAc9C,EAAMU,QAAQC,MAAO+G,EAAQhH,QAAQC,OACnD8G,KAOI,UACE,eAACnH,EAAA,EAAKM,MAAN,WACE,cAACN,EAAA,EAAKO,MAAN,iBACA,cAACP,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OAAOC,IAAKhB,EAAOiB,UAAQ,OAEhD,eAACX,EAAA,EAAKM,MAAN,WACE,cAACN,EAAA,EAAKO,MAAN,mBACA,cAACP,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OAAOC,IAAK0G,EAASzG,UAAQ,OAElD,cAACC,EAAA,EAAD,CAAQH,KAAK,SAAb,4BCxBK,SAASgH,EAAT,GAA+C,IAAfN,EAAc,EAAdA,WAC7C,EAAoD/F,mBAAS,IAA7D,mBAAOsG,EAAP,KAA2BC,EAA3B,KACQtF,EAAaJ,IAAbI,SACAuD,EAAuBvC,IAAvBuC,mBAqBR,OACE,qCACE,cAACyB,EAAA,EAAMC,OAAP,CAAcC,aAAW,EAAzB,iCACA,cAACF,EAAA,EAAMG,KAAP,UACE,eAACxH,EAAA,EAAD,CAAMC,SAvBZ,SAAsBC,GACpBA,EAAMC,iBAENyF,EAAmB8B,GACnBP,KAmBI,UACG9E,EAAS+B,KAAI,SAACc,GAAD,OACZ,cAAClF,EAAA,EAAKM,MAAN,CAAYsH,UAAW1C,EAAQzC,GAA/B,SACE,cAACzC,EAAA,EAAK6H,MAAN,CACEpH,KAAK,WACLJ,MAAOqH,EAAmBI,SAAS5C,EAAQzC,IAC3CsF,MAAO7C,EAAQxC,KACf4D,SAAU,kBAvBM0B,EAuBqB9C,EAAQzC,QAtBzDkF,GAAsB,SAACM,GACrB,OAAIA,EAAuBH,SAASE,GAC3BC,EAAuBC,QAAO,SAACC,GACpC,OAAOH,IAAcG,KAGjB,GAAN,mBAAWF,GAAX,CAAmCD,OAPzC,IAA8BA,MAkBoB9C,EAAQzC,OASlD,cAAC7B,EAAA,EAAD,CAAQH,KAAK,SAAb,4BCrCV,IAAM2H,EAAoB,gBACpBC,EAAe,WAEN,SAASC,EAAT,GAA0B,IAAP7F,EAAM,EAANA,GAChC,EAAkCrB,mBAASgH,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCpH,oBAAS,GAA3C,mBAAOqH,EAAP,KAAkBC,EAAlB,KACMC,EAAoBJ,IAAcH,EAExC,SAASjB,IACPuB,GAAa,GAGf,OACE,sBAAK5I,MAAO,CAAE8I,MAAO,SAAW/I,UAAU,qBAA1C,UACE,eAACgJ,EAAA,EAAIjJ,UAAL,CAAe2I,UAAWA,EAAWO,SAAUN,EAA/C,UACE,eAACO,EAAA,EAAD,CAAKhI,QAAQ,OAAOlB,UAAU,yBAA9B,UACE,cAACkJ,EAAA,EAAInC,KAAL,UACE,cAACmC,EAAA,EAAIC,KAAL,CAAUC,SAAUb,EAApB,6BAEF,cAACW,EAAA,EAAInC,KAAL,UACE,cAACmC,EAAA,EAAIC,KAAL,CAAUC,SAAUZ,EAApB,2BAGJ,eAACQ,EAAA,EAAIK,QAAL,CAAarJ,UAAU,yCAAvB,UACE,cAACgJ,EAAA,EAAIM,KAAL,CAAUF,SAAUb,EAApB,SACE,cAAC1B,EAAD,MAEF,cAACmC,EAAA,EAAIM,KAAL,CAAUF,SAAUZ,EAApB,SACE,cAACpB,EAAD,SAGJ,sBAAKpH,UAAU,oCAAf,sBACW,sBAAMA,UAAU,aAAhB,SAA8B4C,OAEzC,eAAC7B,EAAA,EAAD,CAAQC,QAAS,kBAAM6H,GAAa,IAAO7I,UAAU,YAArD,iBACO8I,EAAoB,eAAiB,gBAI9C,cAACtB,EAAA,EAAD,CAAO+B,KAAMX,EAAWY,OAAQlC,EAAhC,SACGwB,EACC,cAAClB,EAAD,CAAsBN,WAAYA,IAElC,cAACD,EAAD,CAAiBC,WAAYA,SC7CxB,SAASmC,EAAT,GAA4B,IAAP7G,EAAM,EAANA,GAC1B+C,EAAyBnC,IAAzBmC,qBAER,OACE,sBAAK3F,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAzC,UACE,cAACuI,EAAD,CAAS7F,GAAIA,IACZ+C,GAAwB,cAACK,EAAD,OCahB0D,MAhBf,WACE,MAAoBvI,EAAgB,MAApC,mBAAOyB,EAAP,KAAW+G,EAAX,KAYA,OAAO/G,EATL,cAACI,EAAD,CAAgBJ,GAAIA,EAApB,SACE,cAACN,EAAD,UACE,cAACmB,EAAD,CAAuBb,GAAIA,EAA3B,SACE,cAAC6G,EAAD,CAAW7G,GAAIA,UAMC,cAACjD,EAAD,CAAOC,WAAY+J,K,OChB7CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b5d7dda0.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Container, Form, Button } from \"react-bootstrap\";\n// library to create id\nimport { v4 as uuidV4 } from \"uuid\";\n\nexport default function Login({ onIdSubmit }) {\n  const idRef = useRef();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    onIdSubmit(idRef.current.value);\n  }\n\n  // function to create new id when called\n  function createNewId() {\n    onIdSubmit(uuidV4());\n  }\n\n  return (\n    <Container\n      className=\"align-items-center d-flex\"\n      style={{ height: \"100vh\" }}\n    >\n      <Form className=\"w-100\" onSubmit={handleSubmit}>\n        <Form.Group>\n          <Form.Label>Enter Your ID</Form.Label>\n          <Form.Control type=\"text\" ref={idRef} required />\n        </Form.Group>\n        <Button type=\"submit\" className=\"m-2\">\n          Login\n        </Button>\n        <Button onClick={createNewId} variant=\"secondary\">\n          Create A New ID\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"chat-app-\";\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    if (jsonValue !== null) {\n      return JSON.parse(jsonValue);\n    }\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n}\n","import React, { useContext } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst ContactsContext = React.createContext();\n\nexport function useContacts() {\n  return useContext(ContactsContext);\n}\n\nexport function ContactsProvider({ children }) {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n\n  function createContact(id, name) {\n    setContacts((prevContacts) => {\n      return [...prevContacts, { id, name }];\n    });\n  }\n\n  return (\n    <ContactsContext.Provider value={{ contacts, createContact }}>\n      {children}\n    </ContactsContext.Provider>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\n\nconst SocketContext = React.createContext();\n\nexport function useSocket() {\n  return useContext(SocketContext);\n}\n\nexport function SocketProvider({ children, id }) {\n  const [socket, setSocket] = useState();\n\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:5000\", { query: { id } });\n    setSocket(newSocket);\n\n    return () => newSocket.close();\n  }, [id]);\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  );\n}\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage(\n    \"conversations\",\n    []\n  );\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations((prevConversations) => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(\n    ({ recipients, text, sender }) => {\n      setConversations((prevConversations) => {\n        let madeChange = false;\n        const newMessage = { sender, text };\n        const newConversations = prevConversations.map((conversation) => {\n          if (arrayEquality(conversation.recipients, recipients)) {\n            madeChange = true;\n            return {\n              ...conversation,\n              messages: [...conversation.messages, newMessage],\n            };\n          }\n\n          return conversation;\n        });\n\n        if (madeChange) {\n          return newConversations;\n        } else {\n          return [...prevConversations, { recipients, messages: [newMessage] }];\n        }\n      });\n    },\n    [setConversations]\n  );\n\n  useEffect(() => {\n    if (socket == null) return;\n\n    socket.on(\"receive-message\", addMessageToConversation);\n\n    return () => socket.off(\"receive-message\");\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit(\"send-message\", { recipients, text });\n\n    addMessageToConversation({ recipients, text, sender: id });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map((recipient) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === recipient;\n      });\n      const name = (contact && contact.name) || recipient;\n      return { id: recipient, name };\n    });\n\n    const messages = conversation.messages.map((message) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === message.sender;\n      });\n      const name = (contact && contact.name) || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message, senderName: name, fromMe };\n    });\n\n    const selected = index === selectedConversationIndex;\n    return { ...conversation, messages, recipients, selected };\n  });\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation,\n  };\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n\n  a.sort();\n  b.sort();\n\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n","import React, { useState, useCallback } from \"react\";\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function OpenConversation() {\n  const [text, setText] = useState(\"\");\n  // const lastMessageRef = useRef();\n  const setRef = useCallback((node) => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n  const { sendMessage, selectedConversation } = useConversations();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    sendMessage(\n      selectedConversation.recipients.map((recipient) => recipient.id),\n      text\n    );\n    setText(\"\");\n  }\n\n  return (\n    <div className=\"d-flex flex-column flex-grow-1\">\n      <div className=\"flex-grow-1 overflow-auto\"></div>\n      <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\n        {selectedConversation.messages.map((message, index) => {\n          const lastMessage =\n            selectedConversation.messages.length - 1 === index;\n          return (\n            <div\n              ref={lastMessage ? setRef : null}\n              key={index}\n              className={`my-1 d-flex flex-column ${\n                message.fromMe\n                  ? \"align-self-end align-items-end\"\n                  : \"align-items-start\"\n              }`}\n            >\n              <div\n                className={`rounded px-2 py-1 ${\n                  message.fromMe ? \"bg-primary text-white\" : \"border\"\n                }`}\n              >\n                {message.text}\n              </div>\n              <div\n                className={`text-muted-small ${\n                  message.fromMe ? \"text-right\" : \"\"\n                }`}\n              >\n                {message.fromMe ? \"You\" : message.senderName}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"m-2\">\n          <InputGroup>\n            <Form.Control\n              as=\"textarea\"\n              required\n              value={text}\n              onChange={(event) => setText(event.target.value)}\n              style={{ height: \"75px\", resize: \"none\" }}\n            />\n            <InputGroup.Append>\n              <Button type=\"submit\">Send</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function Conversations() {\n  const { conversations, selectConversationIndex } = useConversations();\n\n  return (\n    <ListGroup variant=\"flush\">\n      {conversations.map((conversation, index) => (\n        <ListGroup.Item\n          key={index}\n          action\n          onClick={() => selectConversationIndex(index)}\n          active={conversation.selected}\n        >\n          {conversation.recipients.map((r) => r.name).join(\", \")}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\n\nexport default function Contacts() {\n  const { contacts } = useContacts();\n\n  return (\n    <ListGroup variant=\"flush\">\n      {contacts.map((contact) => (\n        <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\n\nexport default function NewContactModal({ closeModal }) {\n  const idRef = useRef();\n  const nameRef = useRef();\n  const { createContact } = useContacts();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    createContact(idRef.current.value, nameRef.current.value);\n    closeModal();\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>Create Contact</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>ID</Form.Label>\n            <Form.Control type=\"text\" ref={idRef} required />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} required />\n          </Form.Group>\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const { contacts } = useContacts();\n  const { createConversation } = useConversations();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds((prevSelectedContactIds) => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter((prevId) => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...prevSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map((contact) => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                type=\"checkbox\"\n                value={selectedContactIds.includes(contact.id)}\n                label={contact.name}\n                onChange={() => handleCheckboxChange(contact.id)}\n              />\n            </Form.Group>\n          ))}\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Tab, Nav, Button, Modal } from \"react-bootstrap\";\nimport Conversations from \"./Conversations\";\nimport Contacts from \"./Contacts\";\nimport NewContactModal from \"./NewContactModal\";\nimport NewConversationModal from \"./NewConversationModal\";\n\nconst CONVERSATIONS_KEY = \"conversations\";\nconst CONTACTS_KEY = \"contacts\";\n\nexport default function Sidebar({ id }) {\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\n  const [modalOpen, setModalOpen] = useState(false);\n  const conversationsOpen = activeKey === CONVERSATIONS_KEY;\n\n  function closeModal() {\n    setModalOpen(false);\n  }\n\n  return (\n    <div style={{ width: \"250px\" }} className=\"d-flex flex-column\">\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\n        <Nav variant=\"tabs\" className=\"justify-content-center\">\n          <Nav.Item>\n            <Nav.Link eventKey={CONVERSATIONS_KEY}>Conversations</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Tab.Content className=\"border-right overflow-auto flex-grow-1\">\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\n            <Conversations />\n          </Tab.Pane>\n          <Tab.Pane eventKey={CONTACTS_KEY}>\n            <Contacts />\n          </Tab.Pane>\n        </Tab.Content>\n        <div className=\"p-2 border-top border-right small\">\n          Your ID: <span className=\"text-muted\">{id}</span>\n        </div>\n        <Button onClick={() => setModalOpen(true)} className=\"rounded-0\">\n          New {conversationsOpen ? \"Conversation\" : \"Contact\"}\n        </Button>\n      </Tab.Container>\n\n      <Modal show={modalOpen} onHide={closeModal}>\n        {conversationsOpen ? (\n          <NewConversationModal closeModal={closeModal} />\n        ) : (\n          <NewContactModal closeModal={closeModal} />\n        )}\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport OpenConversation from \"./OpenConversation\";\nimport Sidebar from \"./Sidebar\";\nimport { useConversations } from \"../contexts/ConversationsProvider\";\n\nexport default function Dashboard({ id }) {\n  const { selectedConversation } = useConversations();\n\n  return (\n    <div className=\"d-flex\" style={{ height: \"100vh\" }}>\n      <Sidebar id={id} />\n      {selectedConversation && <OpenConversation />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Login from \"./Login\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Dashboard from \"./Dashboard\";\nimport { ContactsProvider } from \"../contexts/ContactsProvider\";\nimport { ConversationsProvider } from \"../contexts/ConversationsProvider\";\nimport { SocketProvider } from \"../contexts/SocketProvider\";\n\nfunction App() {\n  const [id, setId] = useLocalStorage(\"id\");\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n\n  return id ? dashboard : <Login onIdSubmit={setId} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}